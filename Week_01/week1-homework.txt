-------26.删除排序数组中的重复项	
https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/

class Solution {
    public int removeDuplicates(int[] nums) {
        if(nums.length==0) return 0;
        //1、快慢指针 时间复杂度O(n)
        int j = 1; //记录非重复的下标
        for(int i=1; i<nums.length; i++){
            if(nums[i-1]!=nums[i]){
                nums[j] = nums[i];
                j++;
            }
        }
        return j;
    }
}


class Solution {
    public int removeDuplicates(int[] nums) {
        //2、两重循环  时间复杂度O(n^2)
        int i=0; //确认不重复值下标
        int j= 1; 
        while(i<nums.length){
            while(j<nums.length){
                if(nums[j] != nums[i]){
                    nums[++i] = nums[j++];
                    break;
                } 
                j++;
            }
            if(j==nums.length)  return i+1;
        }
        return 1;
    }
}


-------189.旋转数组
https://leetcode-cn.com/problems/rotate-array/

class Solution {
    public void rotate(int[] nums, int k) {
        if(k==0) return;

        //1、暴力求解：双重循环
        //时间复杂度O(n*k) 空间复杂度O(1)，没有额外的空间被使用
        // for(int i=1; i<=k; i++){
        //     int preTmp = nums[nums.length-1];
        //     for(int j=0; j<nums.length; j++){
        //         int newTmp = nums[j];
        //         nums[j] = preTmp; 
        //         preTmp = newTmp;
        //     }
        // }

        //2、使用额外数组   原数组值对应新下标(i+k)%n
        //时间复杂度O(n)  空间复杂度O(n),额外使用了原数组长度的空间
        // int[] newNums = new int[nums.length];
        // for(int i=0; i<nums.length; i++){
        //     newNums[(i+k)%nums.length] = nums[i];
        // }
        // //将新数组复制到旧数组nums
        // for(int i=0; i<newNums.length; i++){
        //     nums[i] = newNums[i];
        // }

        //3、使用反转
        //时间复杂度O(n) 空间复杂度O(1)
        // k %= nums.length;  //防止k>n进行重复反转
        // //3.1 反转所有
        // reverse(nums, 0, nums.length-1);
        // //3.2 反转1~k个元素
        // reverse(nums, 0, k-1);
        // //3.3 反转n-k~n个元素
        // reverse(nums, k, nums.length-1);

        //4、环状替换
        k %=nums.length;
        int count = 0;
        for(int start=0; count<nums.length; start++){
            int current = start;
            int pre = nums[start];
            do{
                int next = (current+k)%nums.length;
                int temp = nums[next];
                nums[next] = pre;
                pre = temp;
                current = next;
                count++;
            }while(start != current);
        }
    }

    public void reverse(int nums[], int start, int end){
        while(start < end){
            int temp = nums[start];
            nums[start++] = nums[end];
            nums[end--] = temp;
        }
    }
}